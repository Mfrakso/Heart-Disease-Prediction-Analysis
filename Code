import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")
import plotly.express as px
import seaborn as sns
df =pd.read_csv("/kaggle/input/heart-disease-dataset/heart.csv")
df
age	sex	cp	trestbps	chol	fbs	restecg	thalach	exang	oldpeak	slope	ca	thal	target
0	52	1	0	125	212	0	1	168	0	1.0	2	2	3	0
1	53	1	0	140	203	1	0	155	1	3.1	0	0	3	0
2	70	1	0	145	174	0	1	125	1	2.6	0	0	3	0
3	61	1	0	148	203	0	1	161	0	0.0	2	1	3	0
4	62	0	0	138	294	1	1	106	0	1.9	1	3	2	0
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
1020	59	1	1	140	221	0	1	164	1	0.0	2	0	2	1
1021	60	1	0	125	258	0	0	141	1	2.8	1	1	3	0
1022	47	1	0	110	275	0	0	118	1	1.0	1	1	2	0
1023	50	0	0	110	254	0	0	159	0	0.0	2	0	2	1
1024	54	1	0	120	188	0	1	113	0	1.4	1	1	3	0
1025 rows × 14 columns

df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1025 entries, 0 to 1024
Data columns (total 14 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   age       1025 non-null   int64  
 1   sex       1025 non-null   int64  
 2   cp        1025 non-null   int64  
 3   trestbps  1025 non-null   int64  
 4   chol      1025 non-null   int64  
 5   fbs       1025 non-null   int64  
 6   restecg   1025 non-null   int64  
 7   thalach   1025 non-null   int64  
 8   exang     1025 non-null   int64  
 9   oldpeak   1025 non-null   float64
 10  slope     1025 non-null   int64  
 11  ca        1025 non-null   int64  
 12  thal      1025 non-null   int64  
 13  target    1025 non-null   int64  
dtypes: float64(1), int64(13)
memory usage: 112.2 KB
df.age.max()
77
df.age.min()
29
df.sex.unique()
array([1, 0])
df.sex.value_counts()
sex
1    713
0    312
Name: count, dtype: int64
sns.set_style('whitegrid')
sns.histplot(df['sex'],color ='red', bins = 10)
<Axes: xlabel='sex', ylabel='Count'>

df.cp.unique()
array([0, 1, 2, 3])
df.cp.value_counts()
cp
0    497
2    284
1    167
3     77
Name: count, dtype: int64
sns.set_style('whitegrid')
sns.histplot(df['cp'],color ='red', bins = 10)
<Axes: xlabel='cp', ylabel='Count'>

df.target.unique()
array([0, 1])
df.target.value_counts()
target
1    526
0    499
Name: count, dtype: int64
sns.set_style('whitegrid')
sns.histplot(df['target'],color ='red', bins = 10)
<Axes: xlabel='target', ylabel='Count'>

df.exang.unique()
array([0, 1])
df.exang.value_counts()
exang
0    680
1    345
Name: count, dtype: int64
fig = px.pie(df, names='target')
fig.show()
fig = px.pie(df, names='sex')
fig.show()
df.age.unique()
array([52, 53, 70, 61, 62, 58, 55, 46, 54, 71, 43, 34, 51, 50, 60, 67, 45,
       63, 42, 44, 56, 57, 59, 64, 65, 41, 66, 38, 49, 48, 29, 37, 47, 68,
       76, 40, 39, 77, 69, 35, 74])
fig = px.pie(df, names='cp')
fig.show()
fig = px.pie(df, names='ca')
fig.show()
fig = px.scatter(df, x="sex", y="target")
fig.show()
fig = px.scatter(df, x="age", y="target")
fig.show()
fig = px.scatter(df, x="sex", y="age")
fig.show()
df.drop(columns = ["thal",'exang','oldpeak'] , inplace=True)
df.head()
age	sex	cp	trestbps	chol	fbs	restecg	thalach	slope	ca	target
0	52	1	0	125	212	0	1	168	2	2	0
1	53	1	0	140	203	1	0	155	0	0	0
2	70	1	0	145	174	0	1	125	0	0	0
3	61	1	0	148	203	0	1	161	2	1	0
4	62	0	0	138	294	1	1	106	1	3	0
 
x = df.drop(columns=["target"])
y = df["target"]
x
age	sex	cp	trestbps	chol	fbs	restecg	thalach	slope	ca
0	52	1	0	125	212	0	1	168	2	2
1	53	1	0	140	203	1	0	155	0	0
2	70	1	0	145	174	0	1	125	0	0
3	61	1	0	148	203	0	1	161	2	1
4	62	0	0	138	294	1	1	106	1	3
...	...	...	...	...	...	...	...	...	...	...
1020	59	1	1	140	221	0	1	164	2	0
1021	60	1	0	125	258	0	0	141	1	1
1022	47	1	0	110	275	0	0	118	1	1
1023	50	0	0	110	254	0	0	159	2	0
1024	54	1	0	120	188	0	1	113	1	1
1025 rows × 10 columns

y
0       0
1       0
2       0
3       0
4       0
       ..
1020    1
1021    0
1022    0
1023    1
1024    0
Name: target, Length: 1025, dtype: int64
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, shuffle=True, random_state=42)
x_train.shape
(820, 10)
y_train.shape
(820,)
model = LogisticRegression()
model.fit(x_train, y_train)

LogisticRegression
LogisticRegression()
model.score(x_train,y_train)
0.8353658536585366
model.score(x_test,y_test)
0.7951219512195122
y_predict = model.predict(x_test)
y_predict
array([1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,
       0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0,
       0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
       1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0,
       0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1,
       1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,
       1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
       0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,
       1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
       1, 1, 1, 0, 1, 0, 1])
accuracy=model.score(x_test,y_test)
accuracy
0.7951219512195122
print(accuracy_score(y_test, y_predict))
0.7951219512195122
heatmap=sns.heatmap(df.corr(),annot=True)
